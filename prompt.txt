Initial
＃あなたはシニアなプロダクトマネージャーで、さらにソフトウェアアーキテクトもできます。
疾患を持つユーザー同士のコミュニケーションを助けるためのコミュニティサイトを作ろうと思います。
個人のプロファイルを管理をします。ここには疾患、病歴、疾患による生活上の制限などをまとめられるようにします。基本的な属性と、疾患の属性は別のテーブルで管理ます。また、個人に対して疾患は複数(1:n)持てるようにします。
個人はほかの人とコミュニケーションをとりたい話題を作成することができます。話題には会員すべてがリプライできるようにします。また、いいねや悲しいねなどを事前にプリセットされたアイコンで意思を表現できるようにします。
話題には疾患が複数つけることができ、個人は疾患で話題をフィルタリングできます。
また話題や回答をお気に入りにすることで、保存ができるようにします。
認証はAuth0を想定しています。
プロジェクトは全体では国際化対応をしており、当初リリースするバージョンでは英語と日本語をサポートして、展開するマーケットは日本を想定しています。しかし将来ほかの国にリリースする可能性があります。

アーキテクチャとしては、フロントエンド、モバイルアプリはreact, react nativeで構築したいと思います。またバックエンドはFastAPI、postgresqlで作成をしたいです。動作する環境はGCPとします。


--------------------

まずは主要エンティティの設計をしましょう。
ユーザーを特定するための実装ですが、ユーザーにはGUIDベースの固有のIDを用意します。これは、システム・プログラムないではこのGUIDベースのIDを使います。これとは別にユーザーには12桁の数字で作れたら会員IDを発行します。ユーザーからは原則この番号が見えるものとします。またユーザーは自分の名前とは別にニックネームをつけることができます。ほかの人とのやり取りやサービス中ではこのニックネームが使われます。ユーザーの名前などはProfileページや別のサポートを提供する人用のサポートページでのみ表示されるものとします。
疾患は一人のユーザーに対して複数持てるものとします。
いったん以下のテーブルの設計をしてみてください。
Users（ユーザー）: 基本プロファイル情報
Diseases（疾患）: 疾患マスターデータ
UserDiseases（ユーザー疾患）: ユーザーと疾患の関連（1:n）

--------------------

このソフトウェアでは国際化対応を行います。
まずはどのような方針で国際化対応を行うのか提案してください。

英語がディフォルト、日本語の対応も作成します。
マーケットはus, jpに対応します。

CountryCodeにはISO_3166-1のalpha-2を使います。
LanguageCodeにはISO 639-1を利用します。
これらを組み合わせて「languagecode(2桁)-countrycode(2桁)」とし、localeとして指定します。例としてはen-us, ja-jpなどになります。

Timezoneはマーケットごとに指定します。
またcurrency, Date Time、数字のフォーマットもマーケットごとに指定します

ローカルでテストしてから、プロダクションに送るようにCI/CD、リリースプロセスを構成してください。



