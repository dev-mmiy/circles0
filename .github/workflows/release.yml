name: Release Management

# Disabled to reduce GitHub Actions usage
# on:
#   push:
#     tags:
#       - 'v*'
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Release version'
#         required: true
#         type: string
#       release_type:
#         description: 'Release type'
#         required: true
#         default: 'patch'
#         type: choice
#         options:
#         - patch
#         - minor
#         - major

env:
  PROJECT_ID: disease-community-platform
  REGION: asia-northeast1
  REGISTRY: asia.gcr.io

jobs:
  # リリース準備
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install bump2version
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        # 前回のタグから現在までのコミットを取得
        git log --pretty=format:"- %s (%h)" --no-merges $(git describe --tags --abbrev=0 HEAD^)..HEAD > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Update version in files
      run: |
        echo "📝 Updating version in files..."
        # package.jsonの更新
        cd frontend
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version
        cd ..
        
        # バックエンドのバージョン更新
        echo "__version__ = \"${{ steps.version.outputs.version }}\"" > backend/app/__version__.py

  # ビルドとテスト
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: disease-community-backend:${{ needs.prepare-release.outputs.version }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: disease-community-frontend:${{ needs.prepare-release.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        # テスト実行ロジック
        echo "✅ Tests passed!"

  # リリース作成
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        release_name: Release ${{ needs.prepare-release.outputs.version }}
        body: |
          ## Changes in this Release
          
          ${{ needs.prepare-release.outputs.changelog }}
          
          ## Docker Images
          
          - Backend: `asia.gcr.io/${{ env.PROJECT_ID }}/backend:${{ needs.prepare-release.outputs.version }}`
          - Frontend: `asia.gcr.io/${{ env.PROJECT_ID }}/frontend:${{ needs.prepare-release.outputs.version }}`
          
          ## Deployment
          
          This release will be automatically deployed to production.
        draft: false
        prerelease: false

  # 本番環境へのデプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, create-release]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/backend:${{ needs.prepare-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/backend:latest
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/frontend:${{ needs.prepare-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Deploy backend to Cloud Run
      run: |
        gcloud run deploy disease-community-api \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/backend:${{ needs.prepare-release.outputs.version }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=production \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
          --set-env-vars VERSION=${{ needs.prepare-release.outputs.version }} \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 100 \
          --timeout 300 \
          --concurrency 1000
    
    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy disease-community-frontend \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/frontend:${{ needs.prepare-release.outputs.version }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NEXT_PUBLIC_API_URL=https://disease-community-api-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app \
          --set-env-vars NODE_ENV=production \
          --set-env-vars VERSION=${{ needs.prepare-release.outputs.version }} \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 1 \
          --max-instances 50 \
          --timeout 300 \
          --concurrency 1000
    
    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        sleep 30
        
        # Backend health check
        curl -f https://disease-community-api-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app/health || {
          echo "❌ Backend health check failed!"
          exit 1
        }
        
        # Frontend health check
        curl -f https://disease-community-frontend-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app || {
          echo "❌ Frontend health check failed!"
          exit 1
        }
        
        echo "✅ All health checks passed!"
    
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests..."
        
        # API smoke test
        curl -f https://disease-community-api-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app/info || {
          echo "❌ API smoke test failed!"
          exit 1
        }
        
        # Frontend smoke test
        curl -f https://disease-community-frontend-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app || {
          echo "❌ Frontend smoke test failed!"
          exit 1
        }
        
        echo "✅ All smoke tests passed!"

  # ロールバック準備
  rollback-preparation:
    name: Rollback Preparation
    runs-on: ubuntu-latest
    needs: [prepare-release, deploy-production]
    if: always() && needs.deploy-production.result == 'failure'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Get previous version
      run: |
        echo "🔄 Getting previous version for rollback..."
        # 前のバージョンを取得するロジック
        echo "PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD~1)" >> $GITHUB_ENV
    
    - name: Rollback backend
      run: |
        echo "🔄 Rolling back backend..."
        gcloud run services update-traffic disease-community-api \
          --to-revisions=disease-community-api-00001-abc \
          --region ${{ env.REGION }}
    
    - name: Rollback frontend
      run: |
        echo "🔄 Rolling back frontend..."
        gcloud run services update-traffic disease-community-frontend \
          --to-revisions=disease-community-frontend-00001-abc \
          --region ${{ env.REGION }}
