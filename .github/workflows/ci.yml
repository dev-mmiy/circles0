name: Continuous Integration & Deployment

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  PROJECT_ID: circles-202510
  REGION: asia-northeast1

jobs:
  # Stage 1: „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÔºàÂÖ®„Éñ„É©„É≥„ÉÅÔºâ
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install black isort flake8 safety

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Backend Linting
      run: |
        cd backend
        echo "üîç Running Black formatting check..."
        black --check .
        echo "üîç Running isort import sorting check..."
        isort --check-only .
        echo "üîç Running flake8 linting..."
        flake8 . --max-line-length=88 --extend-ignore=E203,W503

    - name: Frontend Linting
      run: |
        cd frontend
        echo "üîç Running ESLint..."
        npm run lint
        echo "üîç Running Prettier formatting check..."
        npm run format:check

    - name: Security Scan
      run: |
        echo "üîç Running security scans..."
        cd backend && safety check -r requirements.txt
        cd ../frontend && npm audit --audit-level moderate

  # Stage 2: „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÉÜ„Çπ„ÉàÔºàmain, develop, feature/*Ôºâ
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: disease_community_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/disease_community_test

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/disease_community_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Stage 3: „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÉÜ„Çπ„ÉàÔºàmain, develop, feature/*Ôºâ
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
        npm run test:e2e

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Stage 4: Áµ±Âêà„ÉÜ„Çπ„ÉàÔºàmain, developÔºâ
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm ci

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/integration/ -v

  # Stage 5: Docker„Ç§„É°„Éº„Ç∏„Éì„É´„ÉâÔºàmain, developÔºâ
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Google Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/disease-community-api:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/disease-community-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/disease-community-frontend:${{ github.sha }}
          gcr.io/${{ env.PROJECT_ID }}/disease-community-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Stage 6: „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÔºàmain, developÔºâ
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Deploy to Cloud Run
      run: |
        # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§
        gcloud run deploy disease-community-api \
          --image gcr.io/${{ env.PROJECT_ID }}/disease-community-api:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=production,DATABASE_URL=${{ secrets.DATABASE_URL }}"
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éá„Éó„É≠„Ç§
        gcloud run deploy disease-community-frontend \
          --image gcr.io/${{ env.PROJECT_ID }}/disease-community-frontend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars="NEXT_PUBLIC_API_URL=https://disease-community-api-508246122017.asia-northeast1.run.app"

    - name: Get service URLs
      run: |
        echo "Backend URL: https://disease-community-api-508246122017.asia-northeast1.run.app"
        echo "Frontend URL: https://disease-community-frontend-508246122017.asia-northeast1.run.app"

  # Stage 7: „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÂæå„ÅÆ„ÉÜ„Çπ„ÉàÔºàmain, developÔºâ
  post-deploy-test:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: pip install requests

    - name: Test deployed services
      run: |
        echo "üß™ Testing deployed services..."
        
        # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        curl -f https://disease-community-api-508246122017.asia-northeast1.run.app/health
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà
        curl -f https://disease-community-frontend-508246122017.asia-northeast1.run.app
        
        echo "‚úÖ All services are responding correctly!"

  # Stage 8: ÈÄöÁü•Ôºàmain, developÔºâ
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [post-deploy-test]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Notify Success
      if: needs.post-deploy-test.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Backend: https://disease-community-api-508246122017.asia-northeast1.run.app"
        echo "Frontend: https://disease-community-frontend-508246122017.asia-northeast1.run.app"

    - name: Notify Failure
      if: needs.post-deploy-test.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs for details."