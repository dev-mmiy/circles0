name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: disease-community-platform
  REGION: asia-northeast1
  SERVICE_NAME: disease-community-api

jobs:
  # テストとビルド
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps --no-audit --no-fund

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ -v

    - name: Run TypeScript type check
      run: |
        cd frontend
        npm run type-check

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker イメージのビルドとプッシュ
  build-and-push:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker asia.gcr.io
        gcloud auth configure-docker gcr.io
        gcloud auth configure-docker us.gcr.io
        gcloud auth configure-docker eu.gcr.io

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          asia.gcr.io/${{ env.PROJECT_ID }}/backend:latest
          asia.gcr.io/${{ env.PROJECT_ID }}/backend:${{ github.sha }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=registry
        provenance: false

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          asia.gcr.io/${{ env.PROJECT_ID }}/frontend:latest
          asia.gcr.io/${{ env.PROJECT_ID }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=registry
        provenance: false

  # 開発環境へのデプロイ - 一時的に無効化
  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: false  # 一時的に無効化
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker asia.gcr.io

    - name: Deploy to Cloud Run (Development)
      run: |
        gcloud run deploy disease-community-api-dev \
          --image asia.gcr.io/${{ env.PROJECT_ID }}/backend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=development \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}

    - name: Deploy Frontend to Cloud Run (Development)
      run: |
        gcloud run deploy disease-community-frontend-dev \
          --image asia.gcr.io/${{ env.PROJECT_ID }}/frontend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NEXT_PUBLIC_API_URL=https://disease-community-api-dev-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app

  # 本番環境へのデプロイ - 一時的に無効化
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: false  # 一時的に無効化
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker asia.gcr.io

    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy disease-community-api \
          --image asia.gcr.io/${{ env.PROJECT_ID }}/backend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=production \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}

    - name: Deploy Frontend to Cloud Run (Production)
      run: |
        gcloud run deploy disease-community-frontend \
          --image asia.gcr.io/${{ env.PROJECT_ID }}/frontend:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NEXT_PUBLIC_API_URL=https://disease-community-api-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app

  # ヘルスチェック
  health-check:
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    
    steps:
    - name: Health Check
      run: |
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          curl -f https://disease-community-api-dev-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app/health || exit 1
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          curl -f https://disease-community-api-${{ env.REGION }}-${{ env.PROJECT_ID }}.a.run.app/health || exit 1
        fi
