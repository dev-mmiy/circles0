name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1' # 毎週月曜日の午前2時（UTC）
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 依存関係の脆弱性スキャン
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps --no-audit --no-fund
    
    - name: Run Python security check
      run: |
        cd backend
        pip install safety
        safety check --json --output safety-report.json || echo "Safety check completed with issues"
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --json --audit-level=moderate > npm-audit.json || echo "npm audit completed with issues"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          frontend/npm-audit.json

  # コンテナ脆弱性スキャン - 無効化
  # container-scan:
  #   name: Container Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v5
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Build backend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./backend
  #       push: false
  #       tags: disease-community-backend:latest
  #       target: production
  #   
  #   - name: Build frontend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./frontend
  #       push: false
  #       tags: disease-community-frontend:latest
  #   
  #   - name: Run Trivy vulnerability scanner (Backend)
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'disease-community-backend:latest'
  #       format: 'sarif'
  #       output: 'trivy-backend-results.sarif'
  #   
  #   - name: Run Trivy vulnerability scanner (Frontend)
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'disease-community-frontend:latest'
  #       format: 'sarif'
  #       output: 'trivy-frontend-results.sarif'
  #   
  #   - name: Save Trivy scan results as artifacts (Backend)
  #     uses: actions/upload-artifact@v4
  #     if: always() && hashFiles('trivy-backend-results.sarif') != '' && hashFiles('trivy-backend-results.sarif') != 'null'
  #     with:
  #       name: trivy-backend-results
  #       path: trivy-backend-results.sarif
  #   
  #   - name: Save Trivy scan results as artifacts (Frontend)
  #     uses: actions/upload-artifact@v4
  #     if: always() && hashFiles('trivy-frontend-results.sarif') != '' && hashFiles('trivy-frontend-results.sarif') != 'null'
  #     with:
  #       name: trivy-frontend-results
  #       path: trivy-frontend-results.sarif

  # シークレットスキャン
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # セキュリティレポートの統合
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan]
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v5
      continue-on-error: true
      with:
        name: security-reports
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ -f "safety-report.json" ]; then
          echo "## Python Dependencies" >> security-summary.md
          echo "Safety check completed. See safety-report.json for details." >> security-summary.md
        fi
        
        if [ -f "npm-audit.json" ]; then
          echo "## Node.js Dependencies" >> security-summary.md
          echo "npm audit completed. See npm-audit.json for details." >> security-summary.md
        fi
        
        echo "## Secret Scan" >> security-summary.md
        echo "TruffleHog scan completed." >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
