name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps --no-audit --no-fund
    
    - name: Run Python linting
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/
    
    - name: Run Node.js linting
      run: |
        cd frontend
        npm run lint
        npm run format:check
    
    - name: Run Python tests with coverage
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          backend/coverage.xml
          backend/htmlcov/

  # パフォーマンステスト - 一時的に無効化
  # performance-test:
  #   name: Performance Test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Set up Python ${{ env.PYTHON_VERSION }}
  #     uses: actions/setup-python@v6
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
  #   
  #   - name: Install Python dependencies
  #     run: |
  #       cd backend
  #       pip install -r requirements.txt
  #   
  #   - name: Run Performance Tests
  #     run: |
  #       cd backend
  #       locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --html performance-report.html
  #     env:
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
  #   
  #   - name: Upload performance report
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: performance-report
  #       path: backend/performance-report.html
